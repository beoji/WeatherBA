@page "/CreateForecast"
@using System.Text.Json
@using System.Text.Json.Serialization
@using WeatherBA.Shared.Dtos
@using WeatherBA.Shared.Responses
@inject HttpClient Http
@inject NavigationManager NavManager


<PageTitle>Create forecast</PageTitle>

<h1>Create forecast</h1>


@if (response != null)
{
    if(response.ValidationErrors != null)
    {        
        <ul>
            @foreach(var item in response.ValidationErrors)
            {
                <li class="">@item</li> 
            }
        </ul>
    }        
}


<EditForm Model="@forecast" OnValidSubmit="@SaveForecast">
    <table>

        <tr><label>Id:</label></tr>
        <tr><input type="text" @bind-value="forecast.Id"/></tr>

        <tr><label>Date:</label></tr>
        <tr><input type="text" @bind-value="forecast.Date"/></tr>

        <tr><label>Temperature:</label></tr>
        <tr><input type="text" @bind-value="forecast.TemperatureC"/></tr>

        <tr><label>Summary:</label></tr>
        <tr><input type="text" @bind-value="forecast.Summary"/></tr>

        <input type="submit" value="Save"/>
    </table>
</EditForm>


@code {
    private ForecastCreateDto? forecast;

    private CreateForecastCommandResponse? response = null;
    private HttpResponseMessage? frame;

    protected override async Task OnInitializedAsync()
    {
        forecast = new ForecastCreateDto();
    }

    protected async Task SaveForecast()
    {
        //response = new CreateForecastCommandResponse();

        frame =  await Http.PostAsJsonAsync("api/Forecast", forecast);
        response = await frame.Content.ReadFromJsonAsync<CreateForecastCommandResponse>();
        
        if(response.Success == true)
             NavManager.NavigateTo("/");
            
    }
}